#!/usr/bin/env python
# -*- coding: utf-8 -*-

import evdev
from evdev import InputDevice, categorize, ecodes
from select import select
import time, os
import rospy
import std_msgs
import arom_helper

class user_input(arom_helper.AromNode):
    node_name = "Keyboard"
    node_type = "Keyboard"

    def __init__(self, name = "Keyboard"):
        print "starting Keyboard"


        arom_helper.AromNode.__init__(self)
        self.set_feature('external',{'location': __file__+".feature.hbs",'type': "numerical"})
        self.set_feature('external',{'feature': __file__+".feature.hbs", 'type': "numerical", 'name': 'Keyboard', 'toppic_rx': "/ui"+rospy.get_name()+"/in/raw", 'layer': '/ui'+rospy.get_name()+'/layer'})
        self.btn_pub = rospy.Publisher('/ui'+rospy.get_name()+'/out', std_msgs.msg.String, queue_size=15, latch=False, tcp_nodelay=True)
        
        rospy.logwarn("data odesilam na toppic " + '/ui'+str(rospy.get_name())+'/out')
        #rospy.Subscriber("/led/duty", std_msgs.msg.String, self.callback)

        rate = rospy.Rate(10)
        my_device = []

        devices = [evdev.InputDevice(fn) for fn in evdev.list_devices()]
        for device in devices:
            print(device.fn, device.name, device.phys)
            if 'SEM USB Keyboard' == device.name:
                my_device.append(device.fn)



        self.led_status = 0
        self.layer_count = 2
        self.toggle_button = 172
        self.setLayer()
        self.device1 = evdev.InputDevice(my_device[1])
        self.device2 = evdev.InputDevice(my_device[0])
        self.device1.grab()
        self.device2.grab()

        for i in range(10):
            self.toggleLED()
            time.sleep(0.1)

        self.keymap = [{
            172: 'shift',
            15:  'dome_a',
            155: 'dome_b',
            140: 'tracking_toggle',
            69: 'telescope_1_irisM',
            98: 'telescope_2_irisM',
            55: 'telescope_3_irisM',
            14: 'mount_init',
            71: 'telescope_1_irisP',
            72: 'telescope_2_irisP',
            73: 'telescope_3_irisP',
            74: 'mount_center',
            75: 'telescope_1_focusM',
            76: 'telescope_2_focusM',
            77: 'telescope_3_focusM',
            78: None,
            79: 'telescope_1_focusP',
            80: 'telescope_2_focusP',
            81: 'telescope_3_focusP',
            82: 'telescope_1_close',
            11: 'telescope_2_close',
            83: 'telescope_3_close',
            96: None,
        },{
            172: 'shift',
            15:  'dome_a',
            155: 'dome_b',
            140: 'tracking_toggle',
            69: 'RA_center',
            98: 'DEC_center',
            55: None,
            14: 'speed_1',
            71: None,
            72: 'DEC_P',
            73: None,
            74: 'speed_2',
            75: 'RA_P',
            76: None,
            77: 'RA_M',
            78: 'speed_3',
            79: None,
            80: 'DEC_M',
            81: None,
            82: None,
            11: None,
            83: None,
            96: None,
        }]

        data = []

        while not rospy.is_shutdown():
            for dev in [self.device1.read(), self.device2.read()]:
                try:
                    while True:
                        dev_out = dev.next()
                        if dev_out.type == ecodes.EV_KEY and dev_out.value in [0,1]:
                            data.append(self.GetKey(dev_out))
                except Exception as e:
                    pass

            rate.sleep()


    def GetKey(self, event):
        if event.code == self.toggle_button:
            if event.value == 1:
                layer = self.toggleLayer()
                self.toggleLED()
                self.btn_pub.publish("layer"+str(layer))
        else:
            key = self.keymap[self.layer][event.code]
            if key:
                self.btn_pub.publish(str(key)+str(event.value))
                self.blikLED()
                print "KEY:", (key, event.value)
                return (key, event.value)
            else:
                print "Klavesa nenastavena"

    def setLayer(self, layer = 0):
        self.layer = layer
        if self.layer >= self.layer_count:
            self.layer = self.layer_count
        print "Layer set to:", self.layer
        return self.layer

    def toggleLayer(self, step = +1):
        self.layer += step
        if self.layer >= self.layer_count:
            self.layer = 0
        #print "Layer toggled to:", self.layer
        return self.layer

    def toggleLED(self):
        self.setLED(not bool(self.led_status))

    def setLED(self, status = 1):
        #print "LED", status
        self.device1.set_led(0, bool(status))
        self.led_status = status
        return bool(self.led_status)

    def blikLED(self, duration=0.1):
        self.toggleLED()
        time.sleep(duration)
        self.toggleLED()


if __name__ == '__main__':
    time.sleep(5)
    ui = user_input()

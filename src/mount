#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time
import rospy
import std_msgs
import axis
import json
import os

import solar_patrol_telescope.msg
from arom_helper import AromNode


class SolarLab(AromNode):
    node_name = "mount"
    node_type = "mount"
    node_pymlab = True

    def __init__(self):
        print os.path.dirname(os.path.realpath(__file__))
        print os.getcwd()
        print __file__
        print __file__+'.feature.hbs'

        self.speed_mode = 1
        self.time_speed = 1
        self.tracking = False
        self.operation = []

        self.ra_range = [100, 30000]
        self.dec_range = [100, 30000]

        #
        # 5250 - stred dec
        #


        AromNode.__init__(self)
        node_name = rospy.get_name()
        print node_name

        print "config file:", '/home/odroid/config'+node_name+'.json'
        self.config_file = '/home/odroid/config'+node_name+'.json'
        with open(self.config_file) as json_data:
            self.conf = json.load(json_data)

        print self.conf
        self.ra_range = self.conf['ra']['range']
        self.dec_range = self.conf['dec']['range']


        self.pub_motor_ra = rospy.Publisher(node_name+"/motor_ra", std_msgs.msg.String, queue_size=1)
        self.pub_motor_dec = rospy.Publisher(node_name+"/motor_dec", std_msgs.msg.String, queue_size=1)
        self.pub_motor_time = rospy.Publisher(node_name+"/motor_time", std_msgs.msg.String, queue_size=1)
        self.status = rospy.Publisher(node_name+"/status", solar_patrol_telescope.msg.PatrolaMountStatus, queue_size=5, latch=True)
        #self.pub_ostreni_pos = rospy.Publisher(node_name+"/ostreni/position", std_msgs.msg.String, queue_size=1, latch = True)
        #self.pub_iris_pos = rospy.Publisher(node_name+"/iris/position", std_msgs.msg.String, queue_size=1, latch = True)


        self.sub_iris_request = rospy.Subscriber("/ui/keyboard/out", std_msgs.msg.String, self.ui_action)
        self.sub_dome_request = rospy.Subscriber(node_name+'/dome/setting', solar_patrol_telescope.msg.PatrolaDomeSettings, self.dome_update)


        self.set_feature('external',  {'feature': __file__+'.feature.hbs', 'id': 'mount_position', 'node_name': node_name, 'toppic': node_name+'/status'})
        self.set_feature('hbstep_status__0',  {'id': 'motor_ra', 'name': 'Motor ra', 'node_name': node_name, 'toppic': node_name+'/motor_ra'})
        self.set_feature('hbstep_status__1',  {'id': 'motor_dec', 'name': 'Motor dec', 'node_name': node_name, 'toppic': node_name+'/motor_dec'})
        self.set_feature('hbstep_status__2',  {'id': 'motor_time', 'name': 'Motor time', 'node_name': node_name, 'toppic': node_name+'/motor_time'})
        
        #rospy.Timer(rospy.Duration(1), self.get_status, oneshot=False)

        self.reinitMotors()

        #self.motor_ra.GoToDir(self.conf['ra']['home'])
        #self.motor_dec.GoToDir(self.conf['dec']['home'])
###
###
###        
        self.calibration()


        print "nastavit konfiguraci pro gpio"
        self.dome_auto = False
        self.dome_move_last = time.time()
        self.dome_move_period = 5
        self.dome_move_time = 1
        self.pymlab(device="gpio_dome", method="config_ports", parameters=str(dict(port0 = 0x00, port1 = 0x00)))
        self.pymlab(device="gpio_dome", method="set_ports", parameters=str(dict(port0 = 0x00, port1 = 0x00)))

        i = 10
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            rate.sleep()
            try:

                i += 1
                if i > 10:
                    i = 0
                    self.motor_ra_status = self.motor_ra.getStatus()
                    self.motor_dec_status = self.motor_dec.getStatus()
                    self.motor_time_status = self.motor_time.getStatus()

                    #print self.motor_ra_status
                    
                    self.pub_motor_ra.publish(json.dumps(self.motor_ra_status, ensure_ascii=False))
                    self.pub_motor_dec.publish(json.dumps(self.motor_dec_status, ensure_ascii=False))
                    self.pub_motor_time.publish(json.dumps(self.motor_time_status, ensure_ascii=False))

                    self.save_config()


                self.status.publish(ra = self.motor_ra_status['POSITION_SW'], dec=self.motor_dec_status['POSITION_SW'], time_machine = self.time_speed*int(self.tracking), speed_mode = self.speed_mode, dome_mode = int(self.dome_auto))

                if len(self.operation)>0:
                    req = self.operation.pop(0)
                    print req

                    if 'RA_M1' == req:
                        print "RA - dolu ON", self.ra_range[1]
                        #self.motor_ra.Run(0, 100*self.speed_mode)
                        self.motor_ra.GoToDir(self.ra_range[1], direction = 1)

                    elif 'RA_P1' == req:
                        print "RA - nahoru ON", self.ra_range[0]
                        #self.motor_ra.Run(1, 100*self.speed_mode)
                        self.motor_ra.GoToDir(self.ra_range[0], direction = 0)

                    elif 'RA_center1' == req:
                        print "RA - center"
                        self.motor_ra.GoTo(self.conf['ra']['home'])

                    elif 'RA_M0' == req or 'RA_P0' == req:
                        print "RA - OFF"
                        self.motor_ra.Float()

                    elif 'DEC_M1' == req:
                        print "DEC - dolu ON", self.dec_range[1]
                        self.motor_dec.GoToDir(self.dec_range[1], direction = 1)
                        #self.motor_dec.Run(0, 100*self.speed_mode)

                    elif 'DEC_P1' == req:
                        print "DEC - nahoru ON", self.dec_range[0]
                        #self.motor_dec.Run(1, 100*self.speed_mode)
                        self.motor_dec.GoToDir(self.dec_range[0], direction = 0)

                    elif 'DEC_center1' == req:
                        print "DEC - center"
                        self.motor_dec.GoTo(self.conf['dec']['home'])

                    elif 'DEC_M0' == req or 'DEC_P0' == req:
                        print "DEC - OFF"
                        self.motor_dec.Float()


                    elif 'speed_11' == req:
                        self.speed_mode = 1
                        self.motor_ra.MaxSpeed(self.conf['ra']['speed_1'])
                        self.motor_dec.MaxSpeed(self.conf['dec']['speed_1'])

                    elif 'speed_21' == req:
                        self.speed_mode = 2
                        self.motor_ra.MaxSpeed(self.conf['ra']['speed_2'])
                        self.motor_dec.MaxSpeed(self.conf['dec']['speed_2'])

                    elif 'speed_31' == req:
                        self.speed_mode = 3
                        self.motor_ra.MaxSpeed(self.conf['ra']['speed_3'])
                        self.motor_dec.MaxSpeed(self.conf['dec']['speed_3'])


                    elif 'dome_a1' == req:
                        print 'dome ctrl A'
                        self.pymlab(device="gpio_dome", method="set_ports", parameters=str(dict(port0 = 0b1000, port1 = 0)))

                    elif 'dome_b1' == req:
                        print 'dome ctrl B'
                        self.pymlab(device="gpio_dome", method="set_ports", parameters=str(dict(port0 = 0b100, port1 = 0)))

                    elif 'dome_a0' == req or 'dome_b0' == req:
                        print 'dome ctrl - stop'
                        self.pymlab(device="gpio_dome", method="set_ports", parameters=str(dict(port0 = 0, port1 = 0)))

                    elif 'dome_toggle0' == req:
                        print 'dome ctrl - auto'
                        self.dome_auto = not self.dome_auto

                    elif 'mount_init1' == req:
                        print "Inicializace montaze - automaticke vysteredeni"
                        self.calibration()

                    elif 'mount_center1' == req:
                        "nastaveni motoru na stred"
                        self.motor_ra.setPosition((self.ra_range[1])/2)
                        self.motor_dec.setPosition((self.dec_range[1])/2)

                    elif 'tracking_toggle0' == req:
                        self.tracking = not self.tracking
                        if self.tracking:
                            print "tracking ON"
                            self.motor_time.Run(1, self.conf['time']['speed_solar'])
                        else:
                            print "tracking OFF"
                            self.motor_time.Float()

                if self.dome_auto and (self.dome_move_last + self.dome_move_period) < time.time():
                    print "DOME AUTO MOVE"
                    self.pymlab(device="gpio_dome", method="set_ports", parameters=str(dict(port0 = 2, port1 = 0)))
                    time.sleep(self.dome_move_time)
                    self.pymlab(device="gpio_dome", method="set_ports", parameters=str(dict(port0 = 0, port1 = 0)))
                    self.dome_move_last = time.time()

            except Exception, e:
                print "err1>", repr(e)

        self.motor_ra.Float()
        self.motor_dec.Float()
        self.motor_time.Float()


    def reinitMotors(self):
        self.motor_ra = axis.axis(SPI = self.pymlab, SPI_CS = 0b0001, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mount_ra')
        self.motor_ra.Setup(
                       MAX_SPEED = 500,
                       KVAL_ACC=0.2,
                       KVAL_RUN=0.2,
                       KVAL_DEC=0.2,
                       ACC = 100,
                       DEC = 1000,
                       FS_SPD=3000,
                       STEP_MODE=axis.axis.STEP_MODE_FULL)

        self.motor_ra.Float()
        self.motor_ra.MaxSpeed(self.conf['ra']['speed_1'])
        self.motor_ra.SetSwRange(self.ra_range[0], self.ra_range[1])

        #print "MIKROKROKOVANI!!"
        #print self.motor_ra.getParam(0x16)

        self.motor_dec = axis.axis(SPI = self.pymlab, SPI_CS = 0b0001, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mount_dec')  
        self.motor_dec.Setup(
                       MAX_SPEED = 500,
                       KVAL_ACC=0.2,
                       KVAL_RUN=0.2,
                       KVAL_DEC=0.2,
                       ACC = 100,
                       DEC = 1000,
                       FS_SPD=3000,
                       STEP_MODE=axis.axis.STEP_MODE_FULL)


        self.motor_dec.Float()
        self.motor_dec.MaxSpeed(self.conf['dec']['speed_1'])
        self.motor_dec.SetSwRange(self.dec_range[0], self.dec_range[1])

        self.motor_time = axis.axis(SPI = self.pymlab, SPI_CS = 0b0001, Direction = True, StepsPerUnit = 1, protocol = 'arom', arom_spi_name = 'mount_time')  
        time.sleep(0.2)
        self.motor_time.Setup(
                       MAX_SPEED = 300,
                       KVAL_ACC=0.12,
                       KVAL_RUN=0.12,
                       KVAL_DEC=0.12,
                       ACC = 50,
                       DEC = 100,
                       FS_SPD=3000,
                       STEP_MODE= axis.axis.STEP_MODE_1_128)
        self.motor_time.Float()
        #self.motor_time.MaxSpeed(self.conf['time']['speed_solar'])

        self.motor_ra.Float()
        self.motor_dec.Float()


        time.sleep(0.2)
        self.motor_ra.setStepMode(axis.axis.STEP_MODE_FULL)
        self.motor_dec.setStepMode(axis.axis.STEP_MODE_FULL)

        time.sleep(0.2)
        self.motor_ra_status = self.motor_ra.getStatus()
        self.motor_dec_status= self.motor_dec.getStatus()
        
        time.sleep(0.2)
        self.motor_ra.setPosition(self.conf['ra']['last_pos'])
        self.motor_dec.setPosition(self.conf['dec']['last_pos'])


    def calibration(self):

        self.motor_ra_status = self.motor_ra.getStatus()
        self.motor_dec_status = self.motor_dec.getStatus()
        self.motor_time_status = self.motor_time.getStatus()

        if (not self.motor_ra_status['SW_EVN']) & (not self.motor_dec_status['SW_EVN']):
            ##
            ## prejezd na prvni koncak
            ##
            self.motor_dec.Move(self.dec_range[1]*3)
            self.motor_ra.Move(self.ra_range[1]*3)

            # pohyb prvni
            while self.motor_ra.IsBusy() or self.motor_dec.IsBusy():
                print "cekam"
                time.sleep(0.7)
                self.motor_ra_status = self.motor_ra.getStatus()
                self.motor_dec_status = self.motor_dec.getStatus()
                self.motor_time_status = self.motor_time.getStatus()

                self.pub_motor_ra.publish(json.dumps(self.motor_ra_status, ensure_ascii=False))
                self.pub_motor_dec.publish(json.dumps(self.motor_dec_status, ensure_ascii=False))
                self.pub_motor_time.publish(json.dumps(self.motor_time_status, ensure_ascii=False))

            #self.motor_dec.clearStatus()
            #self.motor_ra.clearStatus()

            self.motor_ra.ResetPos()
            self.motor_dec.ResetPos()

            print "MIKROKROKOVANI!!"
            print self.motor_ra.getParam(0x16)

            print "prejezd do vychozi polohy"
            self.motor_ra.GoToDir((self.ra_range[1])/2)
            self.motor_dec.GoToDir((self.dec_range[1])/2)

            while self.motor_ra.IsBusy() or self.motor_dec.IsBusy():
                time.sleep(0.5)
                self.motor_ra_status = self.motor_ra.getStatus()
                self.motor_dec_status = self.motor_dec.getStatus()
                self.motor_time_status = self.motor_time.getStatus()

                
                self.pub_motor_ra.publish(json.dumps(self.motor_ra_status, ensure_ascii=False))
                self.pub_motor_dec.publish(json.dumps(self.motor_dec_status, ensure_ascii=False))
                self.pub_motor_time.publish(json.dumps(self.motor_time_status, ensure_ascii=False))
            print "jsem uprostred"
            self.motor_ra.Float()
            self.motor_dec.Float()
            self.save_config()

        else:
            print "nektery z motoru je na dorazu..."

    def save_config(self, update_position = True, read=False):
        if update_position:
            self.conf['ra']['last_pos'] = self.motor_ra_status['POSITION']
            self.conf['ra']['pos_update'] = self.motor_ra_status['DATETIME']
            self.conf['dec']['last_pos']= self.motor_dec_status['POSITION']
            self.conf['dec']['pos_update']= self.motor_dec_status['DATETIME']

        with open(self.config_file, 'w') as outfile:
            json.dump(self.conf, outfile, indent=4)

    def ui_action(self, data):
        print data.data
        req = str(data.data)

        if req in ['RA_M0', 'RA_M1', 'DEC_M0', 'DEC_M1', 'RA_P0', 'RA_P1', 'DEC_P0', 'DEC_P1', 'tracking_toggle0', 'dome_a0', 'dome_a1', 'dome_b0', 'dome_b1', 'dome_toggle0', 'speed_11', 'speed_21', 'speed_31', 'RA_center1', 'DEC_center1', 'mount_init1', 'mount_center1']:
            self.operation.append(req)

        else:
            print "tohle neni muj prikaz"

    def dome_update(self, data):
        print data
        self.dome_move_period  =data.dome_period
        self.dome_move_time = data.dome_duration

if __name__ == '__main__':
    time.sleep(1)
    m = SolarLab()
